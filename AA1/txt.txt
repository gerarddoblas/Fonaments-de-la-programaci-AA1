#include <iostream>
#include <cstdlib>
#include <ctime>

const int numRows = 15;
const int numCols = 15;
const char water = '~';
const char ship1 = 'A';
const char ship2 = 'B';
const char ship3 = 'C';

int main() {
    srand(time(0));

    char mapFirstPlayer[numRows][numCols];

    // Inicializar mapa con agua
    for (int i = 0; i < numRows; ++i)
        for (int j = 0; j < numCols; ++j)
            mapFirstPlayer[i][j] = water;

    // =======================
    // Lógica generalizada sin funciones
    // =======================

    bool shipInstance1 = false;
    bool shipInstance2 = false;
    bool shipInstance3 = false;

    int shipLengths[3] = {3, 4, 5};
    char shipChars[3] = {ship1, ship2, ship3};
    bool* shipInstances[3] = {&shipInstance1, &shipInstance2, &shipInstance3};

    for (int s = 0; s < 3; ++s) {
        if (!(*shipInstances[s])) {
            bool placed = false;

            while (!placed) {
                int x = rand() % numRows;
                int y = rand() % numCols;
                bool vertical = rand() % 2;
                int length = shipLengths[s];
                char shipChar = shipChars[s];

                bool canPlace = true;

                // Verificar si se puede colocar el barco
                for (int i = 0; i < length; ++i) {
                    int nx = x + (vertical ? i : 0);
                    int ny = y + (vertical ? 0 : i);

                    if (nx < 0 || nx >= numRows || ny < 0 || ny >= numCols || mapFirstPlayer[nx][ny] != water) {
                        canPlace = false;
                        break;
                    }
                }

                // Si se puede colocar, colócalo
                if (canPlace) {
                    for (int i = 0; i < length; ++i) {
                        int nx = x + (vertical ? i : 0);
                        int ny = y + (vertical ? 0 : i);
                        mapFirstPlayer[nx][ny] = shipChar;
                    }
                    placed = true;
                    *shipInstances[s] = true;
                }
            }
        }
    }

    // Mostrar el mapa (opcional)
    for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < numCols; ++j) {
            std::cout << mapFirstPlayer[i][j] << ' ';
        }
        std::cout << '\n';
    }

    return 0;
}
